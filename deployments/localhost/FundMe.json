{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x954d2dbab868e7384e032deb4914a503a92bef1682d8b81aefcd4aa5162951b6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1018833",
    "logsBloom": "0x
    "blockHash": "0x41483675e601db213f43625476070b6a30f7fd5333cfb81aa2126a29cb538f9c",
    "transactionHash": "0x954d2dbab868e7384e032deb4914a503a92bef1682d8b81aefcd4aa5162951b6",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1018833",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "91888e0a00ca553d565be9fe52cf9620",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"RiceFarmerNFT\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Pragma\\npragma solidity ^0.8.8;\\n\\n// Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//Error Codes\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries\\n\\n// Contracts\\n/// @title A contract for crowd funding\\n/// @author RiceFarmerNFT\\n/// @notice This contract is to demo a sample funding contract\\n/// @dev This implements price feeds as our library\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    //Events\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /// @notice This function funds this contract\\n    /// @dev This implements price feeds as our library\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        //mappings can't be in memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Failed to withdraw Ether\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xfaab277157511058b64c82f57743a1ea6b48c38ed2e3a45966b877ea9373a89e\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        // );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xafacc74fead86aa6a224262a47b60e2885a3f362d5820e137529276673e79a99\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200128f3803806200128f83398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161110f620001806000396000818161033501528181610584015281816105d401526107ca015261110f6000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ab5565b6102eb565b6040516100cc9190610afb565b60405180910390f35b6100dd610333565b005b3480156100eb57600080fd5b506100f4610573565b6040516101019190610afb565b60405180910390f35b34801561011657600080fd5b5061011f610580565b60405161012c9190610b25565b60405180910390f35b34801561014157600080fd5b5061014a6105a8565b6040516101579190610b9f565b60405180910390f35b6101686101b1565b005b6101726105d2565b005b34801561018057600080fd5b5061019b60048036038101906101969190610be6565b610896565b6040516101a89190610b25565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108de90919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610c70565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027f9190610cbf565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610463576000600182815481106103de576103dd610cf3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045b90610d22565b9150506103bb565b50600067ffffffffffffffff81111561047f5761047e610d6a565b5b6040519080825280602002602001820160405280156104ad5781602001602082028036833780820191505090505b50600190805190602001906104c39291906109ab565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104ea90610dca565b60006040518083038185875af1925050503d8060008114610527576040519150601f19603f3d011682016040523d82523d6000602084013e61052c565b606091505b5050905080610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056790610e2b565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610657576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106db57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610691575b5050505050905060005b815181101561076557600082828151811061070357610702610cf3565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075d90610d22565b9150506106e5565b50600067ffffffffffffffff81111561078157610780610d6a565b5b6040519080825280602002602001820160405280156107af5781602001602082028036833780820191505090505b50600190805190602001906107c59291906109ab565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080c90610dca565b60006040518083038185875af1925050503d8060008114610849576040519150601f19603f3d011682016040523d82523d6000602084013e61084e565b606091505b5050905080610892576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088990610e97565b60405180910390fd5b5050565b6000600182815481106108ac576108ab610cf3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ea8361091a565b90506000670de0b6b3a764000085836109039190610eb7565b61090d9190610f28565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190610fe6565b5050509150506402540be400816109a39190611061565b915050919050565b828054828255906000526020600020908101928215610a24579160200282015b82811115610a235782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109cb565b5b509050610a319190610a35565b5090565b5b80821115610a4e576000816000905550600101610a36565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8282610a57565b9050919050565b610a9281610a77565b8114610a9d57600080fd5b50565b600081359050610aaf81610a89565b92915050565b600060208284031215610acb57610aca610a52565b5b6000610ad984828501610aa0565b91505092915050565b6000819050919050565b610af581610ae2565b82525050565b6000602082019050610b106000830184610aec565b92915050565b610b1f81610a77565b82525050565b6000602082019050610b3a6000830184610b16565b92915050565b6000819050919050565b6000610b65610b60610b5b84610a57565b610b40565b610a57565b9050919050565b6000610b7782610b4a565b9050919050565b6000610b8982610b6c565b9050919050565b610b9981610b7e565b82525050565b6000602082019050610bb46000830184610b90565b92915050565b610bc381610ae2565b8114610bce57600080fd5b50565b600081359050610be081610bba565b92915050565b600060208284031215610bfc57610bfb610a52565b5b6000610c0a84828501610bd1565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c5a601b83610c13565b9150610c6582610c24565b602082019050919050565b60006020820190508181036000830152610c8981610c4d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cca82610ae2565b9150610cd583610ae2565b9250828201905080821115610ced57610cec610c90565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d2d82610ae2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d5f57610d5e610c90565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610db4600083610d99565b9150610dbf82610da4565b600082019050919050565b6000610dd582610da7565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e15600b83610c13565b9150610e2082610ddf565b602082019050919050565b60006020820190508181036000830152610e4481610e08565b9050919050565b7f4661696c656420746f2077697468647261772045746865720000000000000000600082015250565b6000610e81601883610c13565b9150610e8c82610e4b565b602082019050919050565b60006020820190508181036000830152610eb081610e74565b9050919050565b6000610ec282610ae2565b9150610ecd83610ae2565b9250828202610edb81610ae2565b91508282048414831517610ef257610ef1610c90565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f3382610ae2565b9150610f3e83610ae2565b925082610f4e57610f4d610ef9565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7881610f59565b8114610f8357600080fd5b50565b600081519050610f9581610f6f565b92915050565b6000819050919050565b610fae81610f9b565b8114610fb957600080fd5b50565b600081519050610fcb81610fa5565b92915050565b600081519050610fe081610bba565b92915050565b600080600080600060a0868803121561100257611001610a52565b5b600061101088828901610f86565b955050602061102188828901610fbc565b945050604061103288828901610fd1565b935050606061104388828901610fd1565b925050608061105488828901610f86565b9150509295509295909350565b600061106c82610f9b565b915061107783610f9b565b925082820261108581610f9b565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156110bd576110bc610c90565b5b82820584148315176110d2576110d1610c90565b5b509291505056fea2646970667358221220f6b6cf76a8065a771a243283b512cbdcacc1b817cdd4bca0dc501ae91aaa855d64736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ab5565b6102eb565b6040516100cc9190610afb565b60405180910390f35b6100dd610333565b005b3480156100eb57600080fd5b506100f4610573565b6040516101019190610afb565b60405180910390f35b34801561011657600080fd5b5061011f610580565b60405161012c9190610b25565b60405180910390f35b34801561014157600080fd5b5061014a6105a8565b6040516101579190610b9f565b60405180910390f35b6101686101b1565b005b6101726105d2565b005b34801561018057600080fd5b5061019b60048036038101906101969190610be6565b610896565b6040516101a89190610b25565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108de90919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610c70565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027f9190610cbf565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610463576000600182815481106103de576103dd610cf3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045b90610d22565b9150506103bb565b50600067ffffffffffffffff81111561047f5761047e610d6a565b5b6040519080825280602002602001820160405280156104ad5781602001602082028036833780820191505090505b50600190805190602001906104c39291906109ab565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104ea90610dca565b60006040518083038185875af1925050503d8060008114610527576040519150601f19603f3d011682016040523d82523d6000602084013e61052c565b606091505b5050905080610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056790610e2b565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610657576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106db57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610691575b5050505050905060005b815181101561076557600082828151811061070357610702610cf3565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075d90610d22565b9150506106e5565b50600067ffffffffffffffff81111561078157610780610d6a565b5b6040519080825280602002602001820160405280156107af5781602001602082028036833780820191505090505b50600190805190602001906107c59291906109ab565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080c90610dca565b60006040518083038185875af1925050503d8060008114610849576040519150601f19603f3d011682016040523d82523d6000602084013e61084e565b606091505b5050905080610892576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088990610e97565b60405180910390fd5b5050565b6000600182815481106108ac576108ab610cf3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ea8361091a565b90506000670de0b6b3a764000085836109039190610eb7565b61090d9190610f28565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190610fe6565b5050509150506402540be400816109a39190611061565b915050919050565b828054828255906000526020600020908101928215610a24579160200282015b82811115610a235782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109cb565b5b509050610a319190610a35565b5090565b5b80821115610a4e576000816000905550600101610a36565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8282610a57565b9050919050565b610a9281610a77565b8114610a9d57600080fd5b50565b600081359050610aaf81610a89565b92915050565b600060208284031215610acb57610aca610a52565b5b6000610ad984828501610aa0565b91505092915050565b6000819050919050565b610af581610ae2565b82525050565b6000602082019050610b106000830184610aec565b92915050565b610b1f81610a77565b82525050565b6000602082019050610b3a6000830184610b16565b92915050565b6000819050919050565b6000610b65610b60610b5b84610a57565b610b40565b610a57565b9050919050565b6000610b7782610b4a565b9050919050565b6000610b8982610b6c565b9050919050565b610b9981610b7e565b82525050565b6000602082019050610bb46000830184610b90565b92915050565b610bc381610ae2565b8114610bce57600080fd5b50565b600081359050610be081610bba565b92915050565b600060208284031215610bfc57610bfb610a52565b5b6000610c0a84828501610bd1565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c5a601b83610c13565b9150610c6582610c24565b602082019050919050565b60006020820190508181036000830152610c8981610c4d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cca82610ae2565b9150610cd583610ae2565b9250828201905080821115610ced57610cec610c90565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d2d82610ae2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d5f57610d5e610c90565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610db4600083610d99565b9150610dbf82610da4565b600082019050919050565b6000610dd582610da7565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e15600b83610c13565b9150610e2082610ddf565b602082019050919050565b60006020820190508181036000830152610e4481610e08565b9050919050565b7f4661696c656420746f2077697468647261772045746865720000000000000000600082015250565b6000610e81601883610c13565b9150610e8c82610e4b565b602082019050919050565b60006020820190508181036000830152610eb081610e74565b9050919050565b6000610ec282610ae2565b9150610ecd83610ae2565b9250828202610edb81610ae2565b91508282048414831517610ef257610ef1610c90565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f3382610ae2565b9150610f3e83610ae2565b925082610f4e57610f4d610ef9565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7881610f59565b8114610f8357600080fd5b50565b600081519050610f9581610f6f565b92915050565b6000819050919050565b610fae81610f9b565b8114610fb957600080fd5b50565b600081519050610fcb81610fa5565b92915050565b600081519050610fe081610bba565b92915050565b600080600080600060a0868803121561100257611001610a52565b5b600061101088828901610f86565b955050602061102188828901610fbc565b945050604061103288828901610fd1565b935050606061104388828901610fd1565b925050608061105488828901610f86565b9150509295509295909350565b600061106c82610f9b565b915061107783610f9b565b925082820261108581610f9b565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156110bd576110bc610c90565b5b82820584148315176110d2576110d1610c90565b5b509291505056fea2646970667358221220f6b6cf76a8065a771a243283b512cbdcacc1b817cdd4bca0dc501ae91aaa855d64736f6c63430008130033",
  "devdoc": {
    "author": "RiceFarmerNFT",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}